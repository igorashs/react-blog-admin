{"version":3,"sources":["components/Login/index.js","components/Login/Login.js"],"names":["Login","useState","username","setUsername","password","setPassword","usernameError","setUsernameError","passwordError","setPasswordError","formError","setFormError","e","a","preventDefault","validateUsername","validatePassword","fetchToken","res","unknownError","error","localStorage","setItem","window","location","reload","useEffect","className","method","onSubmit","htmlFor","type","id","name","onChange","currentTarget","value"],"mappings":"gOAGeA,UCCA,WAAkB,IAAD,EACEC,mBAAS,MADX,mBACvBC,EADuB,KACbC,EADa,OAEEF,mBAAS,MAFX,mBAEvBG,EAFuB,KAEbC,EAFa,OAGYJ,mBAAS,IAHrB,mBAGvBK,EAHuB,KAGRC,EAHQ,OAIYN,mBAAS,IAJrB,mBAIvBO,EAJuB,KAIRC,EAJQ,OAKIR,mBAAS,IALb,mBAKvBS,EALuB,KAKZC,EALY,iDAO9B,WAA4BC,GAA5B,mBAAAC,EAAA,yDACED,EAAEE,iBACIR,EAAgBS,YAAiBb,GACjCM,EAAgBQ,YAAiBZ,IAEnCE,IAAiBE,EALvB,gBAMID,EAAiBD,GACjBG,EAAiBD,GAPrB,wCASsBS,YAAW,CAAEf,WAAUE,aAT7C,SASUc,EATV,QAWYZ,cACNC,EAAiB,eACRW,EAAIV,cACbC,EAAiB,eACRS,EAAIC,aACbR,EAAaO,EAAIE,QAEjBT,EAAa,IAEM,kBAARO,IACTG,aAAaC,QAAQ,QAASJ,GAC9BG,aAAaC,QAAQ,MAAO,yBAC5BC,OAAOC,SAASC,WAvBxB,6CAP8B,sBAyD9B,OApBAC,qBAAU,WACS,OAAbxB,GACFK,EAAiBQ,YAAiBb,MAEnC,CAACA,IAEJwB,qBAAU,WACS,OAAbtB,GACFK,EAAiBO,YAAiBZ,MAEnC,CAACA,IAWF,6BAASuB,UAAU,oBACjB,qCACA,0BACEC,OAAO,OACPC,SA9DwB,4CA+DxBF,WAAYjB,GAAaJ,GAAiBE,IAAkB,aAE5D,2BAAOsB,QAAQ,WAAWH,UAAWrB,GAAiB,SAAtD,YACYA,GAEZ,2BACEyB,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,SAvBR,SAA8BtB,GAC5BT,EAAYS,EAAEuB,cAAcC,UAwBxB,2BAAON,QAAQ,WAAWH,UAAWnB,GAAiB,SAAtD,YACYA,GAEZ,2BACEuB,KAAK,WACLE,KAAK,WACLD,GAAG,WACHE,SA5BR,SAA8BtB,GAC5BP,EAAYO,EAAEuB,cAAcC,UA6BxB,yCACE1B,EAAiB,2BAAOiB,UAAU,SAASjB,GAA/B","file":"static/js/3.29221b43.chunk.js","sourcesContent":["import Login from './Login';\nimport './Login.css';\n\nexport default Login;\n","import React, { useEffect, useState } from 'react';\nimport { fetchToken } from '../../lib/api';\nimport { validatePassword, validateUsername } from '../../lib/validator';\n\nexport default function Login() {\n  const [username, setUsername] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [usernameError, setUsernameError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [formError, setFormError] = useState('');\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const usernameError = validateUsername(username);\n    const passwordError = validatePassword(password);\n\n    if (usernameError || passwordError) {\n      setUsernameError(usernameError);\n      setPasswordError(passwordError);\n    } else {\n      const res = await fetchToken({ username, password });\n\n      if (res.usernameError) {\n        setUsernameError(' is invalid');\n      } else if (res.passwordError) {\n        setPasswordError(' is invalid');\n      } else if (res.unknownError) {\n        setFormError(res.error);\n      } else {\n        setFormError('');\n\n        if (typeof res === 'string') {\n          localStorage.setItem('token', res);\n          localStorage.setItem('sip', 'do not touch my token');\n          window.location.reload();\n        }\n      }\n    }\n  }\n\n  // validate after inputs change\n  useEffect(() => {\n    if (username !== null) {\n      setUsernameError(validateUsername(username));\n    }\n  }, [username]);\n\n  useEffect(() => {\n    if (password !== null) {\n      setPasswordError(validatePassword(password));\n    }\n  }, [password]);\n\n  function handleUsernameChange(e) {\n    setUsername(e.currentTarget.value);\n  }\n\n  function handlePasswordChange(e) {\n    setPassword(e.currentTarget.value);\n  }\n\n  return (\n    <section className=\"LoginFormSection\">\n      <h2>Login</h2>\n      <form\n        method=\"Post\"\n        onSubmit={handleSubmit}\n        className={(formError || usernameError || passwordError) && 'FormError'}\n      >\n        <label htmlFor=\"username\" className={usernameError && 'Error'}>\n          Username {usernameError}\n        </label>\n        <input\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          onChange={handleUsernameChange}\n        />\n        <label htmlFor=\"password\" className={passwordError && 'Error'}>\n          Password {passwordError}\n        </label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          onChange={handlePasswordChange}\n        />\n        <button>Login</button>\n        {!formError ? '' : <label className=\"Error\">{formError}</label>}\n      </form>\n    </section>\n  );\n}\n"],"sourceRoot":""}