{"version":3,"sources":["components/Posts/index.js","components/Posts/Posts.js"],"names":["Posts","posts","useState","setPosts","useEffect","fetch","a","token","localStorage","getItem","fetchPosts","res","error","message","logout","console","setTimeout","addTimestamps","sortByDate","usePosts","filteredPosts","setFilteredPosts","isPublished","setIsPublished","newFilteredPosts","filter","post","className","onClick","to","map","key","_id","pathname","state","title","length","slice","timestamp"],"mappings":"wOAGeA,UCEA,WACb,IAAMC,EAqER,WAAqB,IAAD,EACQC,mBAAS,MADjB,mBACXD,EADW,KACJE,EADI,KAyBlB,OAtBAC,qBAAU,WACR,IAAMC,EAAK,uCAAG,8BAAAC,EAAA,6DACNC,EAAQC,aAAaC,QAAQ,SADvB,SAEMC,YAAWH,GAFjB,QAENI,EAFM,QAIHC,OAKmB,cAAtBD,EAAIC,MAAMC,SACZC,cAGFC,QAAQH,MAAM,wDACdI,WAAWX,EAAO,OATlBY,YAAcN,GACdO,YAAWP,GACXR,EAASQ,IAPC,2CAAH,qDAkBXN,MACC,IAEIJ,EA9FOkB,GADgB,EAEYjB,mBAAS,MAFrB,mBAEvBkB,EAFuB,KAERC,EAFQ,OAGQnB,oBAAS,GAHjB,mBAGvBoB,EAHuB,KAGVC,EAHU,KAwB9B,OAnBAnB,qBAAU,WACR,GAAKgB,EAAL,CAKA,IAAII,EAAmBvB,EAEnBqB,IACFE,EAAmBA,EAAiBC,QAAO,SAACC,GAAD,OAAUA,EAAKJ,gBAG5DD,EAAiBG,QAVfH,EAAiBpB,KAWlB,CAACA,EAAOqB,IAOT,6BAASK,UAAU,oBACjB,6BAASA,UAAU,WACjB,uCACA,yBAAKA,UAAU,kBACb,4BACEC,QAVV,WACEL,GAAgBD,IAURK,UACE,WAAaL,EAAc,gBAAkB,mBAHjD,eAUJ,6BAASK,UAAU,YACjB,kBAAC,IAAD,CAAME,GAAG,aAAaF,UAAU,WAAhC,WAIF,wBAAIA,UAAU,aACXP,GACCA,EAAcU,KAAI,SAACJ,GAAD,OAChB,wBAAIC,UAAU,eAAeI,IAAKL,EAAKM,KACrC,kBAAC,IAAD,CAAMH,GAAI,CAAEI,SAAS,UAAD,OAAYP,EAAKM,KAAOE,MAAOR,IACjD,iCACE,4BACGA,EAAKS,MAAMC,OAAS,IAApB,UACMV,EAAKS,MAAME,MAAM,EAAG,KAD1B,OAEGX,EAAKS,OAEX,2BACGT,EAAKJ,YACF,aAAeI,EAAKY,UACpBZ,EAAKY","file":"static/js/4.cc17995b.chunk.js","sourcesContent":["import Posts from './Posts';\nimport './Posts.css';\n\nexport default Posts;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { addTimestamps, sortByDate, logout } from '../../lib/helpers';\nimport { fetchPosts } from '../../lib/api';\n\nexport default function Posts() {\n  const posts = usePosts();\n  const [filteredPosts, setFilteredPosts] = useState(null);\n  const [isPublished, setIsPublished] = useState(false);\n\n  useEffect(() => {\n    if (!filteredPosts) {\n      setFilteredPosts(posts);\n      return;\n    }\n\n    let newFilteredPosts = posts;\n\n    if (isPublished) {\n      newFilteredPosts = newFilteredPosts.filter((post) => post.isPublished);\n    }\n\n    setFilteredPosts(newFilteredPosts);\n  }, [posts, isPublished]);\n\n  function handlePublished() {\n    setIsPublished(!isPublished);\n  }\n\n  return (\n    <section className=\"PostsListSection\">\n      <section className=\"Filters\">\n        <h3>Filters</h3>\n        <div className=\"FiltersOptions\">\n          <button\n            onClick={handlePublished}\n            className={\n              'Filter ' + (isPublished ? 'FilterEnabled' : 'FilterDisabled')\n            }\n          >\n            Published\n          </button>\n        </div>\n      </section>\n      <section className=\"ListMenu\">\n        <Link to=\"/posts/new\" className=\"MenuBtn\">\n          Create\n        </Link>\n      </section>\n      <ul className=\"PostsList\">\n        {filteredPosts &&\n          filteredPosts.map((post) => (\n            <li className=\"PostListItem\" key={post._id}>\n              <Link to={{ pathname: `/posts/${post._id}`, state: post }}>\n                <article>\n                  <h3>\n                    {post.title.length > 200\n                      ? `${post.title.slice(0, 200)}...`\n                      : post.title}\n                  </h3>\n                  <p>\n                    {post.isPublished\n                      ? 'Published ' + post.timestamp\n                      : post.timestamp}\n                  </p>\n                </article>\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </section>\n  );\n}\n\n// fetch posts data and return posts state\nfunction usePosts() {\n  const [posts, setPosts] = useState(null);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetchPosts(token);\n\n      if (!res.error) {\n        addTimestamps(res);\n        sortByDate(res);\n        setPosts(res);\n      } else {\n        if (res.error.message === 'Forbidden') {\n          logout();\n        }\n\n        console.error('Failed to fetch the data, Try to fetch again in 5sec');\n        setTimeout(fetch, 5000);\n      }\n    };\n\n    fetch();\n  }, []);\n\n  return posts;\n}\n"],"sourceRoot":""}