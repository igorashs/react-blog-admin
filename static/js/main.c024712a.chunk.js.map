{"version":3,"sources":["lib/helpers.js","lib/validator.js","components/App/Status.js","components/Loading/index.js","components/Loading/Loading.js","components/Post/index.js","components/Post/Post.js","components/PostNew/index.js","components/PostNew/PostNew.js","components/PostEdit/index.js","components/PostEdit/PostEdit.js","components/App/App.js","components/App/index.js","index.js","lib/api.js"],"names":["addTimestamps","dataArr","Array","forEach","data","date","timestamp","moment","calendar","sortByDate","sort","a","b","logout","localStorage","removeItem","window","location","reload","useToken","useState","token","setToken","useEffect","getItem","validateUsername","username","length","validatePassword","password","validateTitle","title","validateText","text","Status","props","className","status","Loading","xmlns","version","viewBox","d","Post","post","useLocation","state","postId","comments","setComments","fetchPostCommentsWithId","error","fetch","useComments","_id","handleCommentDeleteClick","e","commentID","currentTarget","dataset","commentid","deleteCommentById","filter","c","alert","console","log","deletePost","to","pathname","onClick","isPublished","map","key","data-commentid","PostNew","setTitle","setText","setIsPublished","titleError","setTitleError","textError","setTextError","preventDefault","createPost","Date","onSubmit","htmlFor","id","type","onChange","value","PostEdit","updatePost","Login","lazy","Posts","App","isOnline","setIsOnline","fetchServerStatus","setTimeout","useIsOnline","basename","href","handleLogout","fallback","path","exact","ReactDOM","render","StrictMode","document","getElementById","API_URL","json","fetchToken","user","method","headers","body","JSON","stringify","res","validationError","passwordError","usernameError","unknownError","fetchPosts","Authorization","postID"],"mappings":"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","file":"static/js/main.c024712a.chunk.js","sourcesContent":["import moment from 'moment';\nimport { useEffect, useState } from 'react';\n\n// add timestamps to state array (which have date prop)\n// doesn't modify the state if it has an invalid type\nexport function addTimestamps(dataArr) {\n  if (dataArr instanceof Array) {\n    dataArr.forEach((data) => {\n      if (data.date) {\n        return (data.timestamp = moment(data.date).calendar());\n      }\n    });\n  }\n}\n\n// sort the state array by date\nexport function sortByDate(dataArr) {\n  dataArr.sort((a, b) => {\n    if (a.date > b.date) {\n      return -1;\n    }\n\n    if (a.date < b.date) {\n      return 1;\n    }\n\n    return 0;\n  });\n}\n\n// removes invalid token and reloads the page\nexport function logout() {\n  localStorage.removeItem('token');\n  window.location.reload();\n}\n\n// get the token from LocalStorage\nexport function useToken() {\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n    setToken(localStorage.getItem('token'));\n  }, []);\n\n  return token;\n}\n","export function validateUsername(username) {\n  if (!username) {\n    return 'is required';\n  }\n\n  if (username.length > 15) {\n    return 'should be less than 15 characters';\n  }\n\n  return '';\n}\n\nexport function validatePassword(password) {\n  if (!password) {\n    return 'is required';\n  }\n\n  return '';\n}\n\nexport function validateTitle(title) {\n  if (!title) {\n    return 'is required';\n  }\n\n  if (title.length > 80) {\n    return 'should be less than 80 characters';\n  }\n\n  return '';\n}\n\nexport function validateText(text) {\n  if (!text) {\n    return 'is required';\n  }\n\n  if (text.length > 7300) {\n    return 'should be less than 7300 characters';\n  }\n\n  return '';\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Status(props) {\n  return (\n    <p className={props.status ? 'Online' : 'Offline'}>\n      {props.status ? 'Online' : 'Offline'}\n    </p>\n  );\n}\n\nStatus.propTypes = {\n  status: PropTypes.bool\n};\n","import Loading from './Loading';\nimport './Loading.css';\n\nexport default Loading;\n","import React from 'react';\n\nexport default function Loading() {\n  return (\n    <div className=\"Loading\">\n      <svg\n        className=\"Loading-img\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        version=\"1.1\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path d=\"M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z\" />\n      </svg>\n    </div>\n  );\n}\n","import Post from './Post';\nimport './Post.css';\n\nexport default Post;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { addTimestamps } from '../../lib/helpers';\nimport {\n  fetchPostCommentsWithId,\n  deleteCommentById,\n  deletePost\n} from '../../lib/api';\nimport { Link } from 'react-router-dom';\nimport { useToken } from '../../lib/helpers';\n\nexport default function Post() {\n  const token = useToken();\n  const post = useLocation().state;\n  const [comments, setComments] = useComments(post._id);\n\n  async function handleCommentDeleteClick(e) {\n    const { commentid: commentID } = e.currentTarget.dataset;\n\n    const res = await deleteCommentById(post._id, commentID, token);\n    if (res.status === 204) {\n      setComments(comments.filter((c) => c._id !== commentID));\n    } else {\n      window.alert('Something went wrong!');\n    }\n  }\n\n  async function handlePostDeleteClick() {\n    console.log('ye');\n    const res = await deletePost(post._id, token);\n\n    if (res.status === 204) {\n      window.location.reload();\n    } else {\n      window.alert('Something went wrong!');\n    }\n  }\n\n  return (\n    <article className=\"PostPage\">\n      <section className=\"PostMenu\">\n        <ul className=\"PostMenuList\">\n          <li>\n            <Link\n              to={{ pathname: `/posts/${post._id}/edit/`, state: post }}\n              className=\"EditBtn MenuBtn\"\n            >\n              Edit\n            </Link>\n          </li>\n          <li>\n            <button\n              className=\"DeleteBtn MenuBtn\"\n              onClick={handlePostDeleteClick}\n            >\n              Delete\n            </button>\n          </li>\n        </ul>\n      </section>\n      <header>\n        <h1>\n          <span className=\"Italic\">{post.title}</span>\n          <p className=\"Date\">\n            {post.isPublished ? 'Posted: ' : 'Last Update: '} {post.timestamp}\n          </p>\n        </h1>\n      </header>\n      <section className=\"PostText\">\n        <p>{post.text}</p>\n      </section>\n      <footer>\n        <section className=\"PostComments\">\n          <h2>Comments</h2>\n          {comments.length > 0 ? (\n            <ul>\n              {comments.map((c) => (\n                <li key={c._id}>\n                  <article className=\"PostComment\">\n                    <h3>{c.username}</h3>\n                    <div>\n                      <p className=\"CommentText\">{c.text}</p>\n                      <p className=\"CommentDate\">{c.timestamp}</p>\n                    </div>\n                    <button\n                      className=\"DeleteBtn MenuBtn\"\n                      data-commentid={c._id}\n                      onClick={handleCommentDeleteClick}\n                    >\n                      Delete\n                    </button>\n                  </article>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            'No Comments'\n          )}\n        </section>\n      </footer>\n    </article>\n  );\n}\n\n// Fetch post comments and return the state\nfunction useComments(postId) {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const comments = await fetchPostCommentsWithId(postId);\n\n      if (!comments.error) {\n        addTimestamps(comments);\n        setComments(comments);\n      } else {\n        setComments([]);\n      }\n    };\n    fetch();\n  }, [postId]);\n\n  return [comments, setComments];\n}\n","import PostNew from './PostNew';\n\nexport default PostNew;\n","import React, { useState, useEffect } from 'react';\nimport { validateText, validateTitle } from '../../lib/validator';\nimport { useToken } from '../../lib/helpers';\nimport { createPost } from '../../lib/api';\n\nexport default function PostNew() {\n  const [title, setTitle] = useState(null);\n  const [text, setText] = useState(null);\n  const [isPublished, setIsPublished] = useState(false);\n  const [titleError, setTitleError] = useState('');\n  const [textError, setTextError] = useState('');\n\n  const token = useToken();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    const titleError = validateTitle(title);\n    const textError = validateText(text);\n\n    if (titleError || textError) {\n      setTitleError(titleError);\n      setTextError(textError);\n    } else {\n      const res = await createPost(\n        { title, text, isPublished, date: new Date() },\n        token\n      );\n\n      if (res.status !== 201) {\n        setTitleError('invalid');\n        setTextError('invalid');\n      } else {\n        window.location.reload();\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (title !== null) {\n      setTitleError(validateTitle(title));\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (text !== null) {\n      setTextError(validateText(text));\n    }\n  }, [text]);\n\n  function handleTitleChange(e) {\n    setTitle(e.currentTarget.value);\n  }\n\n  function handleTextChange(e) {\n    setText(e.currentTarget.value);\n  }\n\n  return (\n    <main>\n      <header>\n        <h2>New Post</h2>\n      </header>\n      <section\n        className={\n          'PostFormSection ' + ((titleError || textError) && 'FormError')\n        }\n      >\n        <form className=\"PostForm\" onSubmit={handleSubmit}>\n          <label htmlFor=\"Title\" className={titleError && 'Error'}>\n            Title {titleError}\n          </label>\n          <input id=\"Title\" type=\"text\" onChange={handleTitleChange} />\n          <label htmlFor=\"Text\" type=\"text\" className={textError && 'Error'}>\n            Text {textError}\n          </label>\n          <textarea id=\"Text\" onChange={handleTextChange}></textarea>\n          <div className=\"FormOptions\">\n            <button\n              id=\"PublishBtn\"\n              className=\"Btn\"\n              onClick={() => setIsPublished(true)}\n            >\n              Publish\n            </button>\n            <button\n              id=\"SaveBtn\"\n              className=\"Btn\"\n              onClick={() => setIsPublished(false)}\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </section>\n    </main>\n  );\n}\n","import PostEdit from './PostEdit';\n\nexport default PostEdit;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useToken } from '../../lib/helpers';\nimport { validateTitle, validateText } from '../../lib/validator';\nimport { updatePost } from '../../lib/api';\n\nexport default function PostEdit() {\n  const post = useLocation().state;\n  const [title, setTitle] = useState(post.title);\n  const [text, setText] = useState(post.text);\n  const [isPublished, setIsPublished] = useState(post.isPublished);\n  const [titleError, setTitleError] = useState('');\n  const [textError, setTextError] = useState('');\n\n  const token = useToken();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    const titleError = validateTitle(title);\n    const textError = validateText(text);\n\n    if (titleError || textError) {\n      setTitleError(titleError);\n      setTextError(textError);\n    } else {\n      const res = await updatePost(\n        post._id,\n        { title, text, isPublished, date: new Date() },\n        token\n      );\n\n      if (res.status !== 204) {\n        setTitleError('invalid');\n        setTextError('invalid');\n      } else {\n        window.location.reload();\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (title !== null) {\n      setTitleError(validateTitle(title));\n    }\n  }, [title]);\n\n  useEffect(() => {\n    if (text !== null) {\n      setTextError(validateText(text));\n    }\n  }, [text]);\n\n  function handleTitleChange(e) {\n    setTitle(e.currentTarget.value);\n  }\n\n  function handleTextChange(e) {\n    setText(e.currentTarget.value);\n  }\n\n  return (\n    <main>\n      <header>\n        <h2>Edit Post</h2>\n      </header>\n      <section\n        className={\n          'PostFormSection ' + ((titleError || textError) && 'FormError')\n        }\n      >\n        <form className=\"PostForm\" onSubmit={handleSubmit}>\n          <label htmlFor=\"Title\" className={titleError && 'Error'}>\n            Title {titleError}\n          </label>\n          <input\n            id=\"Title\"\n            type=\"text\"\n            onChange={handleTitleChange}\n            value={title}\n          />\n          <label htmlFor=\"Text\" type=\"text\" className={textError && 'Error'}>\n            Text {textError}\n          </label>\n          <textarea\n            id=\"Text\"\n            onChange={handleTextChange}\n            value={text}\n          ></textarea>\n          <div className=\"FormOptions\">\n            <button\n              id=\"PublishBtn\"\n              className=\"Btn\"\n              onClick={() =>\n                isPublished ? setIsPublished(false) : setIsPublished(true)\n              }\n            >\n              {post.isPublished ? 'Unpublish' : 'Publish'}\n            </button>\n            <button\n              id=\"SaveBtn\"\n              className=\"Btn\"\n              // onClick={() => setIsPublished(false)}\n            >\n              Save\n            </button>\n          </div>\n        </form>\n      </section>\n    </main>\n  );\n}\n","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport Status from './Status';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from 'react-router-dom';\nimport { fetchServerStatus } from '../../lib/api';\nimport { useToken } from '../../lib/helpers';\n\nimport Loading from '../Loading';\nimport Post from '../Post';\nimport PostNew from '../PostNew';\nimport PostEdit from '../PostEdit';\n\nconst Login = lazy(() => import('../Login'));\nconst Posts = lazy(() => import('../Posts'));\n\nfunction App() {\n  const isOnline = useIsOnline();\n  const token = useToken();\n\n  return (\n    <Router basename=\"/\">\n      <header className=\"App_Header\">\n        <nav className=\"App_Nav\">\n          <ul>\n            <li>\n              <Link to=\"/\">BlogEditor</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"Status\">\n          <Status status={isOnline} />\n          {token ? (\n            <a href=\"#\" onClick={handleLogout}>\n              Logout\n            </a>\n          ) : (\n            ''\n          )}\n        </div>\n      </header>\n      <Suspense fallback={<Loading />}>\n        <Switch>\n          <Route path=\"/posts/new\" exact>\n            {!token ? <Redirect to=\"/login\" /> : <PostNew />}\n          </Route>\n          <Route path=\"/posts/:postId\" exact>\n            {!token ? <Redirect to=\"/login\" /> : <Post />}\n          </Route>\n          <Route path=\"/posts/:postId/edit\" exact>\n            {!token ? <Redirect to=\"/login\" /> : <PostEdit />}\n          </Route>\n          <Route path=\"/login\">{token ? <Redirect to=\"/\" /> : <Login />}</Route>\n          <Route path=\"/\">\n            {!token ? <Redirect to=\"/login\" /> : <Posts />}\n          </Route>\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\n// fetch server status and return status state\nfunction useIsOnline() {\n  const [isOnline, setIsOnline] = useState(false);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const status = await fetchServerStatus();\n\n      if (!status.error) {\n        setIsOnline(true);\n      } else {\n        console.error('Failed connection to API, Try to reconnect in 10sec');\n        setIsOnline(false);\n        setTimeout(fetch, 10000);\n      }\n    };\n\n    fetch();\n  });\n\n  return isOnline;\n}\n\nexport default App;\n\nfunction handleLogout() {\n  localStorage.removeItem('token');\n  window.location.reload();\n}\n","import App from './App';\nimport './App.css';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// This is MY API WRAPPER for MY SERVER API CALLS\n\nconst API_URL = 'https://aqueous-woodland-72578.herokuapp.com/';\n\nexport async function fetchServerStatus() {\n  try {\n    const data = await fetch(API_URL);\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchToken(user) {\n  try {\n    const data = await fetch(`${API_URL}user/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n\n    const res = await data.json();\n\n    if (res.validationError) {\n      if (res.validationError === 'Invalid password')\n        return { error: res.validationError, passwordError: true };\n      if (res.validationError === 'Invalid username')\n        return { error: res.validationError, usernameError: true };\n      return { error: res.validationError, unknownError: true };\n    }\n\n    return res;\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchPosts(token) {\n  try {\n    const res = await fetch(`${API_URL}posts/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    const data = await res.json();\n\n    return data;\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function fetchPostCommentsWithId(id) {\n  try {\n    const data = await fetch(`${API_URL}posts/${id}/comments/`);\n\n    return await data.json();\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function deleteCommentById(postID, commentID, token) {\n  try {\n    const res = await fetch(`${API_URL}posts/${postID}/comments/${commentID}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    return res;\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function deletePost(postID, token) {\n  try {\n    const res = await fetch(`${API_URL}posts/${postID}/`, {\n      method: 'Delete',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    return res;\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function createPost(post, token) {\n  try {\n    const res = await fetch(`${API_URL}posts/new/`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n\n    return res;\n  } catch (error) {\n    return { error };\n  }\n}\n\nexport async function updatePost(postID, post, token) {\n  try {\n    const res = await fetch(`${API_URL}posts/${postID}/`, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n\n    return res;\n  } catch (error) {\n    return { error };\n  }\n}\n"],"sourceRoot":""}